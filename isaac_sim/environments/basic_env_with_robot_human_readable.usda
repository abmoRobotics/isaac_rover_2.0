#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (2.8808686863348574, -2.599546798816713, 4.492192737505122)
                double3 target = (0.4536188466618287, 1.834818309396113, -2.3676869312473663)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:dynamicDiffuseGI:probeCounts" = (6, 6, 6)
            float3 "rtx:dynamicDiffuseGI:probeGridOrigin" = (-210, -250, -10)
            float3 "rtx:dynamicDiffuseGI:volumeSize" = (600, 440, 300)
            int "rtx:externalFrameCounter" = 57513
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:lightspeed:material:overrideAlbedo" = (0.5, 0.5, 0.5)
            float3 "rtx:lightspeed:material:overrideEmissiveColor" = (0.5, 0.5, 0.5)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Z"
)

over "Render" (
    hide_in_stage_window = true
)
{
}

def Xform "World"
{
    def Xform "GroundPlane"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            uniform token purpose = "guide"
        }
    }

    def PhysicsScene "PhysicsScene"
    {
        vector3f physics:gravityDirection = (0, 0, -1)
        float physics:gravityMagnitude = 9.8
    }

    def Scope "Looks"
    {
        def Material "Brushed_Antique_Copper"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Brushed_Antique_Copper/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Brushed_Antique_Copper/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Brushed_Antique_Copper/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @../rover_usd/Materials/Brushed_Antique_Copper.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "Brushed_Antique_Copper"
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }

    def "Mars_Rover" (
        instanceable = false
        prepend payload = @file:/isaac-sim/ROB10_share/rover_usd/Mars_Rover.usd@
    )
    {
        quatd xformOp:orient = (0.7071067690849304, 0, 0, 0.7071067690849304)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0.5284944176673889)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Differential"
        {
        }

        over "base_link"
        {
            over "Differential_Revolute"
            {
                float state:angular:physics:position = -0.02513695
                float state:angular:physics:velocity = -0.22014618
            }

            over "FL_Boogie_Revolute"
            {
                float state:angular:physics:position = 0.24046946
                float state:angular:physics:velocity = 0.38961208
            }

            over "FR_Boogie_Revolute"
            {
                float state:angular:physics:position = 0.35519528
                float state:angular:physics:velocity = 2.0933156
            }
        }

        over "FL_Boogie"
        {
            over "FL_Steer_Revolute"
            {
                float state:angular:physics:position = -0.086545356
                float state:angular:physics:velocity = 0.18711707
            }

            over "RL_Boogie_Revolute"
            {
                float state:angular:physics:position = -1.903603
                float state:angular:physics:velocity = -11.35505
            }
        }

        over "FR_Boogie"
        {
            over "FR_Steer_Revolute"
            {
                float state:angular:physics:position = -0.0072372532
                float state:angular:physics:velocity = -0.12683684
            }

            over "RR_Boogie_Revolute"
            {
                float state:angular:physics:position = -1.6695857
                float state:angular:physics:velocity = -9.032582
            }
        }

        over "FL_Steer"
        {
            over "FL_Drive_Continous"
            {
                float state:angular:physics:position = 200.08415
                float state:angular:physics:velocity = 80.0278
            }
        }

        over "RL_Boogie"
        {
            over "CL_Drive_Continous"
            {
                float state:angular:physics:position = 149.66986
                float state:angular:physics:velocity = 85.03986
            }

            over "RL_Steer_Revolute"
            {
                float state:angular:physics:position = -0.13459668
                float state:angular:physics:velocity = 0.09004178
            }
        }

        over "FR_Steer"
        {
            over "FR_Drive_Continous"
            {
                float state:angular:physics:position = 148.07628
                float state:angular:physics:velocity = 85.2661
            }
        }

        over "RR_Boogie"
        {
            over "CR_Drive_Continous"
            {
                float state:angular:physics:position = 79.85139
                float state:angular:physics:velocity = 92.02095
            }

            over "RR_Steer_Revolute"
            {
                float state:angular:physics:position = -0.07439478
                float state:angular:physics:velocity = -0.18130925
            }
        }

        over "FL_Drive"
        {
        }

        over "CL_Drive"
        {
        }

        over "RL_Steer"
        {
            over "RL_Drive_Continous"
            {
                float state:angular:physics:position = -316.62253
                float state:angular:physics:velocity = 111.44733
            }
        }

        over "FR_Drive"
        {
        }

        over "CR_Drive"
        {
        }

        over "RR_Steer"
        {
            over "RR_Drive_Continous"
            {
                float state:angular:physics:position = -315.7194
                float state:angular:physics:velocity = 112.22406
            }
        }

        over "RL_Drive"
        {
        }

        over "RR_Drive"
        {
        }

        over "Link1"
        {
        }

        over "Link2"
        {
        }
    }

    def OmniGraph "ActionGraph"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 5)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "on_playback_tick" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 1
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-564.4066, -252.28415)
        }

        def OmniGraphNode "articulation_controller" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom double[] inputs:effortCommand = []
            custom uint inputs:execIn
            prepend uint inputs:execIn.connect = </World/ActionGraph/on_playback_tick.outputs:tick>
            custom int[] inputs:jointIndices = []
            custom token[] inputs:jointNames = []
            prepend token[] inputs:jointNames.connect = </World/ActionGraph/make_array.outputs:array>
            custom double[] inputs:positionCommand = []
            prepend double[] inputs:positionCommand.connect = </World/ActionGraph/rover_base_controller.outputs:steer_command>
            custom string inputs:robotPath = ""
            custom rel inputs:targetPrim
            prepend rel inputs:targetPrim = </World/Mars_Rover>
            custom bool inputs:usePath = 0
            custom double[] inputs:velocityCommand = []
            token node:type = "omni.isaac.core_nodes.IsaacArticulationController"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (981.95844, -581.8278)
        }

        def OmniGraphNode "constant_token" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:value = "FL_Steer_Revolute"
            token node:type = "omni.graph.nodes.ConstantToken"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-229.69398, -662.1981)
        }

        def OmniGraphNode "constant_token_01" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:value = "FR_Steer_Revolute"
            token node:type = "omni.graph.nodes.ConstantToken"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (6.1408277, -664.5936)
        }

        def OmniGraphNode "constant_token_02" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:value = "RL_Steer_Revolute"
            token node:type = "omni.graph.nodes.ConstantToken"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-223.77238, -538.73615)
        }

        def OmniGraphNode "constant_token_03" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:value = "RR_Steer_Revolute"
            token node:type = "omni.graph.nodes.ConstantToken"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (7.1319127, -537.745)
        }

        def OmniGraphNode "make_array" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom int inputs:arraySize = 4
            custom token inputs:arrayType = "auto" (
                allowedTokens = ["auto", "bool[]", "double[]", "float[]", "half[]", "int[]", "int64[]", "token[]", "uchar[]", "uint[]", "uint64[]", "double[2][]", "double[3][]", "double[4][]", "matrixd[3][]", "matrixd[4][]", "float[2][]", "float[3][]", "float[4][]", "half[2][]", "half[3][]", "half[4][]", "int[2][]", "int[3][]", "int[4][]"]
            )
            custom token inputs:input0
            delete token inputs:input0.connect = </World/ActionGraph/constant_token.inputs:value>
            prepend token inputs:input0.connect = </World/ActionGraph/constant_token.inputs:value>
            custom token inputs:input1 (
                customData = {
                    string ExtendedAttributeType = "Any"
                    dictionary omni = {
                        dictionary graph = {
                            string attrType = "Any"
                        }
                    }
                }
            )
            delete token inputs:input1.connect = </World/ActionGraph/constant_token_01.inputs:value>
            prepend token inputs:input1.connect = </World/ActionGraph/constant_token_01.inputs:value>
            custom token inputs:input2 (
                customData = {
                    string ExtendedAttributeType = "Any"
                    dictionary omni = {
                        dictionary graph = {
                            string attrType = "Any"
                        }
                    }
                }
            )
            delete token inputs:input2.connect = </World/ActionGraph/constant_token_02.inputs:value>
            prepend token inputs:input2.connect = </World/ActionGraph/constant_token_02.inputs:value>
            custom token inputs:input3 (
                customData = {
                    string ExtendedAttributeType = "Any"
                    dictionary omni = {
                        dictionary graph = {
                            string attrType = "Any"
                        }
                    }
                }
            )
            delete token inputs:input3.connect = </World/ActionGraph/constant_token_03.inputs:value>
            prepend token inputs:input3.connect = </World/ActionGraph/constant_token_03.inputs:value>
            token node:type = "omni.graph.nodes.ConstructArray"
            int node:typeVersion = 1
            custom token outputs:array
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (573.30615, -649.0475)
        }

        def OmniGraphNode "rover_base_controller" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom double inputs:ang_vel = 0
            prepend double inputs:ang_vel.connect = </World/ActionGraph/break_3_vector.outputs:z>
            custom double inputs:lin_vel = -2
            prepend double inputs:lin_vel.connect = </World/ActionGraph/break_3_vector_01.outputs:x>
            token node:type = "aau.rover.base_controller2.RoverBaseController"
            int node:typeVersion = 1
            custom double[] outputs:steer_command = []
            custom double[] outputs:velocity_command = []
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (603.91144, 4.5989647)
        }

        def OmniGraphNode "constant_token_04" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:value = "FL_Drive_Continous"
            token node:type = "omni.graph.nodes.ConstantToken"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-222.06812, -366.70007)
        }

        def OmniGraphNode "constant_token_05" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:value = "FR_Drive_Continous"
            token node:type = "omni.graph.nodes.ConstantToken"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (13.382986, -365.2985)
        }

        def OmniGraphNode "constant_token_06" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:value = "CL_Drive_Continous"
            token node:type = "omni.graph.nodes.ConstantToken"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-224.87108, -241.9671)
        }

        def OmniGraphNode "constant_token_07" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:value = "CR_Drive_Continous"
            token node:type = "omni.graph.nodes.ConstantToken"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (17.587435, -250.37605)
        }

        def OmniGraphNode "constant_token_08" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:value = "RL_Drive_Continous"
            token node:type = "omni.graph.nodes.ConstantToken"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-219.26514, -114.43117)
        }

        def OmniGraphNode "constant_token_09" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:value = "RR_Drive_Continous"
            token node:type = "omni.graph.nodes.ConstantToken"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (14.784448, -121.43854)
        }

        def OmniGraphNode "make_array_01" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom int inputs:arraySize = 6
            custom token inputs:arrayType = "auto" (
                allowedTokens = ["auto", "bool[]", "double[]", "float[]", "half[]", "int[]", "int64[]", "token[]", "uchar[]", "uint[]", "uint64[]", "double[2][]", "double[3][]", "double[4][]", "matrixd[3][]", "matrixd[4][]", "float[2][]", "float[3][]", "float[4][]", "half[2][]", "half[3][]", "half[4][]", "int[2][]", "int[3][]", "int[4][]"]
            )
            custom token inputs:input0
            delete token inputs:input0.connect = </World/ActionGraph/constant_token_04.inputs:value>
            prepend token inputs:input0.connect = </World/ActionGraph/constant_token_04.inputs:value>
            custom token inputs:input1 (
                customData = {
                    string ExtendedAttributeType = "Any"
                    dictionary omni = {
                        dictionary graph = {
                            string attrType = "Any"
                        }
                    }
                }
            )
            delete token inputs:input1.connect = </World/ActionGraph/constant_token_05.inputs:value>
            prepend token inputs:input1.connect = </World/ActionGraph/constant_token_05.inputs:value>
            custom token inputs:input2 (
                customData = {
                    string ExtendedAttributeType = "Any"
                    dictionary omni = {
                        dictionary graph = {
                            string attrType = "Any"
                        }
                    }
                }
            )
            delete token inputs:input2.connect = </World/ActionGraph/constant_token_06.inputs:value>
            prepend token inputs:input2.connect = </World/ActionGraph/constant_token_06.inputs:value>
            custom token inputs:input3 (
                customData = {
                    string ExtendedAttributeType = "Any"
                    dictionary omni = {
                        dictionary graph = {
                            string attrType = "Any"
                        }
                    }
                }
            )
            delete token inputs:input3.connect = </World/ActionGraph/constant_token_07.inputs:value>
            prepend token inputs:input3.connect = </World/ActionGraph/constant_token_07.inputs:value>
            custom token inputs:input4 (
                customData = {
                    string ExtendedAttributeType = "Any"
                    dictionary omni = {
                        dictionary graph = {
                            string attrType = "Any"
                        }
                    }
                }
            )
            delete token inputs:input4.connect = </World/ActionGraph/constant_token_08.inputs:value>
            prepend token inputs:input4.connect = </World/ActionGraph/constant_token_08.inputs:value>
            custom token inputs:input5 (
                customData = {
                    string ExtendedAttributeType = "Any"
                    dictionary omni = {
                        dictionary graph = {
                            string attrType = "Any"
                        }
                    }
                }
            )
            delete token inputs:input5.connect = </World/ActionGraph/constant_token_09.inputs:value>
            prepend token inputs:input5.connect = </World/ActionGraph/constant_token_09.inputs:value>
            token node:type = "omni.graph.nodes.ConstructArray"
            int node:typeVersion = 1
            custom token outputs:array
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (355.34747, -327.0123)
        }

        def OmniGraphNode "articulation_controller_01" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom double[] inputs:effortCommand = []
            custom uint inputs:execIn
            prepend uint inputs:execIn.connect = </World/ActionGraph/on_playback_tick.outputs:tick>
            custom int[] inputs:jointIndices = []
            custom token[] inputs:jointNames = []
            prepend token[] inputs:jointNames.connect = </World/ActionGraph/make_array_01.outputs:array>
            custom double[] inputs:positionCommand = []
            custom string inputs:robotPath = ""
            custom rel inputs:targetPrim = </World/Mars_Rover>
            custom bool inputs:usePath = 0
            custom double[] inputs:velocityCommand = []
            prepend double[] inputs:velocityCommand.connect = </World/ActionGraph/rover_base_controller.outputs:velocity_command>
            token node:type = "omni.isaac.core_nodes.IsaacArticulationController"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (978.4815, -302.5077)
        }

        def OmniGraphNode "ros2_context" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uchar inputs:domain_id = 5
            custom bool inputs:useDomainIDEnvVar = 0
            token node:type = "omni.isaac.ros2_bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context = 0
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-210.94318, 135.10802)
        }

        def OmniGraphNode "ros2_subscribe_twist" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context = 0
            prepend uint64 inputs:context.connect = </World/ActionGraph/ros2_context.outputs:context>
            custom uint inputs:execIn
            prepend uint inputs:execIn.connect = </World/ActionGraph/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace = ""
            custom uint64 inputs:queueSize = 10
            custom string inputs:topicName = "cmd_vel"
            token node:type = "omni.isaac.ros2_bridge.ROS2SubscribeTwist"
            int node:typeVersion = 1
            custom vector3d outputs:angularVelocity = (0, 0, 0)
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom vector3d outputs:linearVelocity = (0, 0, 0)
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (59.59178, 43.93168)
        }

        def OmniGraphNode "break_3_vector" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:tuple
            prepend token inputs:tuple.connect = </World/ActionGraph/ros2_subscribe_twist.outputs:angularVelocity>
            token node:type = "omni.graph.nodes.BreakVector3"
            int node:typeVersion = 1
            custom token outputs:x
            custom token outputs:y
            custom token outputs:z
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (337.20355, -21.307081)
        }

        def OmniGraphNode "break_3_vector_01" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:tuple
            prepend token inputs:tuple.connect = </World/ActionGraph/ros2_subscribe_twist.outputs:linearVelocity>
            token node:type = "omni.graph.nodes.BreakVector3"
            int node:typeVersion = 1
            custom token outputs:x
            custom token outputs:y
            custom token outputs:z
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (353.86008, 195.23007)
        }
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float angle = 1
        float intensity = 3000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

